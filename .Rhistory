)
# Rename elements of list
names(rawDat) <- samples
# Tidy up each of the dataframes in list
# Use col 4 of the dataframe, see link below for reason
# https://www.biostars.org/p/285757/
# https://www.biostars.org/p/407788/
for (x in samples) {
row.names(rawDat[[x]]) <- rawDat[[x]]$V1
rawDat[[x]] <- rawDat[[x]][, c(1,4)]
colnames(rawDat[[x]]) <- c('GeneID', x)
}
# Merge list elements
countMat <- rawDat %>%
reduce(left_join, by = "GeneID")
# Load required packages
library(dplyr)
# Merge list elements
countMat <- rawDat %>%
reduce(left_join, by = "GeneID")
# Load required packages
library(tidyverse)
# Merge list elements
countMat <- rawDat %>%
reduce(left_join, by = "GeneID")
# Make gene names row names
row.names(countMat) <- countMat$GeneID
countMat$GeneID <- NULL
metaDir <- '/Users/jamesboot/Documents/9.Genome Centre Files/YungYao_Analysis/SRA'
# Need to update the sample names (colnames)
GSE159_SRA <- read.delim(file.path(metaDir, 'GSE159_SraRunTable.txt'),
sep = ',')[, c('Run', 'Sample.Name')]
GSE159_SampNames <- read.csv(file.path(metaDir, 'GSE159_SampNames.csv'),
header = F,
col.names = c(
'SRA.Sample',
'Real.Sample'
))
View(GSE159_SRA)
View(GSE159_SampNames)
GSE189_SRA <- read.delim(file.path(metaDir, 'GSE189_SraRunTable.txt'),
sep = ',')[, c('Run', 'Sample.Name')]
GSE189_SampNames <- read.csv(file.path(metaDir, 'GSE189_SampNames.csv'),
header = F,
col.names = c(
'SRA.Sample',
'Real.Sample'
))
All_SRA <- rbind(GSE159_SRA, GSE189_SRA)
colnames(All_SRA) <- c('Run', 'SRA.Sample')
All_SampNames <- rbind(GSE159_SampNames, GSE189_SampNames)
All_SRA
SampleNameLookup <- list(All_SRA, All_SampNames) %>%
reduce(left_join, by = "SRA.Sample")
SampleNameLookup
colnames(countMat) <-
plyr::mapvalues(colnames(countMat),
as.character(SampleNameLookup$Run),
as.character(SampleNameLookup$Real.Sample))
colnames(countMat)
# Subset counts matrix to samples of itnerest
soi <- c("A_ctrl_0", "A_mut_0", "B_ctrl_0", "B_mut_0", "C_ctrl_0", "C_mut_0")
filtCountMat <- countMat[, soi]
# Create a meta data dataframe
meta <- data.frame('Sample' = colnames(filtCountMat),
'Group' = rep(c('CORR', 'DMD'), 3))
meta
filtCountMat
# Plot distribution of counts
ggplot(filCountMat, aes(x=A_ctrl_0)) + geom_histogram()
library(ggplot2)
# Plot distribution of counts
ggplot(filtCountMat, aes(x=A_ctrl_0)) + geom_histogram()
# Plot distribution of counts
filtCountMatLog <- log10(filtCountMat)
ggplot(filtCountMatLog, aes(x=A_ctrl_0)) + geom_histogram()
ggplot(filtCountMat, aes(x=A_ctrl_0)) + geom_histogram(binwidth = 10)
# Filter - remove genes with max counts of 10 across all samples
?apply
# Filter - remove genes with max counts of 10 across all samples
apply(filtCountMat, MARGIN = 1, max)
maximums <= 10
# Filter - remove genes with max counts of 10 across all samples
maximums <- apply(filtCountMat, MARGIN = 1, max)
maximums <= 10
# Develop home-made method for differential gene expression
# Compare results with EdgeR
# Use data from old project
# Load required packages
library(tidyverse)
library(ggplot2)
# Set working directory
setwd('/Users/jamesboot/Documents/GitHubEnterprise/RNAseq/')
# Specify data and meta directory
dataDir <- '/Users/jamesboot/Documents/9.Genome Centre Files/YungYao_Analysis/STAR'
metaDir <- '/Users/jamesboot/Documents/9.Genome Centre Files/YungYao_Analysis/SRA'
# Find files
inFiles <- list.files(path = dataDir,
pattern = '*_ReadsPerGene.out.tab',
full.names = T)
# Get sample names from file names
samples <- gsub(
'_ReadsPerGene.out.tab',
'',
list.files(path = dataDir,
pattern = '*_ReadsPerGene.out.tab')
)
# Load files
rawDat <- lapply(inFiles, function(x){
read.delim(x,
sep = '\t',
skip = 4,
header = F)
})
# Rename elements of list
names(rawDat) <- samples
# Tidy up each of the dataframes in list
# Use col 4 of the dataframe, see link below for reason
# https://www.biostars.org/p/285757/
# https://www.biostars.org/p/407788/
for (x in samples) {
row.names(rawDat[[x]]) <- rawDat[[x]]$V1
rawDat[[x]] <- rawDat[[x]][, c(1,4)]
colnames(rawDat[[x]]) <- c('GeneID', x)
}
# Merge list elements
countMat <- rawDat %>%
reduce(left_join, by = "GeneID")
# Make gene names row names
row.names(countMat) <- countMat$GeneID
countMat$GeneID <- NULL
# Need to update the sample names (colnames)
GSE159_SRA <- read.delim(file.path(metaDir, 'GSE159_SraRunTable.txt'),
sep = ',')[, c('Run', 'Sample.Name')]
GSE159_SampNames <- read.csv(file.path(metaDir, 'GSE159_SampNames.csv'),
header = F,
col.names = c(
'SRA.Sample',
'Real.Sample'
))
GSE189_SRA <- read.delim(file.path(metaDir, 'GSE189_SraRunTable.txt'),
sep = ',')[, c('Run', 'Sample.Name')]
GSE189_SampNames <- read.csv(file.path(metaDir, 'GSE189_SampNames.csv'),
header = F,
col.names = c(
'SRA.Sample',
'Real.Sample'
))
All_SRA <- rbind(GSE159_SRA, GSE189_SRA)
colnames(All_SRA) <- c('Run', 'SRA.Sample')
All_SampNames <- rbind(GSE159_SampNames, GSE189_SampNames)
SampleNameLookup <- list(All_SRA, All_SampNames) %>%
reduce(left_join, by = "SRA.Sample")
colnames(countMat) <-
plyr::mapvalues(colnames(countMat),
as.character(SampleNameLookup$Run),
as.character(SampleNameLookup$Real.Sample))
# Subset counts matrix to samples of itnerest
soi <- c("A_ctrl_0", "A_mut_0", "B_ctrl_0", "B_mut_0", "C_ctrl_0", "C_mut_0")
CountMat <- countMat[, soi]
# Create a meta data dataframe
meta <- data.frame('Sample' = colnames(CountMat),
'Group' = rep(c('CORR', 'DMD'), 3))
# Plot distribution of counts
CountMatLog <- log10(CountMat)
ggplot(CountMatLog, aes(x=A_ctrl_0)) + geom_histogram()
ggplot(CountMat, aes(x=A_ctrl_0)) + geom_histogram(binwidth = 10)
# Filter - remove genes with max counts of 10 across all samples
maximums <- apply(CountMat, MARGIN = 1, max)
maximums <= 10
CountMat
filtCountMat <- CountMat[maximums <= 10, ]
filtCountMat <- CountMat[maximums >= 10, ]
# Normalisation
sum(filtCountMat$A_ctrl_0)
1e6
# Normalisation
1e6/sum(filtCountMat$A_ctrl_0)
# Normalisation
normFactor <- 1e6/sum(filtCountMat$A_ctrl_0)
sum(filtCountMat$A_ctrl_0*normFactor)
apply(filtCountMat, MARGIN = 2, function(x){
1e6/sum(x)
})
# Normalisation (convert to counts per million)
normFactors <- apply(filtCountMat, MARGIN = 2, function(x){
1e6/sum(x)
})
# Apply normalisation factors
apply(filtCountMat, 2, function(x, normFactors){
print(x)
print(normFactors)
})
# Normalisation (convert to counts per million)
# Calculate normalisation factors
normFactors <- apply(filtCountMat, MARGIN = 2, function(x){
1e6/sum(x)
})
# Apply normalisation factors
apply(filtCountMat, 2, function(x, normFactors){
print(x)
print(normFactors)
})
filtCountMat*normFactors
normCountMat <- filtCountMat*normFactors
apply(normCountMat, 2, sum)
# Apply normalisation factors
test <- function(x, factors){
print(x)
print(normFactors)
}
apply(filtCountMat, 2, FUN = test, factors = normFactors)
# Apply normalisation factors
normCountMat <- filtCountMat
normCountMat
# Apply normalisation factors
normCountMat <- filtCountMat
for (x in 1:ncol(normCountMat)) {
normCountMat[, x] <- normCountMat*normFactors[x]
}
# Apply normalisation factors
normCountMat <- filtCountMat
for (x in 1:ncol(normCountMat)) {
normCountMat[, x] <- normCountMat[, x]*normFactors[x]
}
normCountMat
sum(normCountMat[, 1])
# Create design matrix for differential expression
design <- model.matrix(~Group,
data = meta)
design
row.names(design) <- meta$Sample
design
?glm
# Perform differential expression with glm poisson
# Use group from meta data as grouping factor
Group <- meta$Group
?binomial
library(MASS)
glm.nb(normCountMat[1, ] ~ Group)
normCountMat[1, ]
glm.nb(as.vector(normCountMat[1, ]) ~ Group)
# Perform differential expression with glm poisson
# Use group from meta data as grouping factor
Group <- meta$Group
glm.nb(normCountMat[1, ] ~ Group)
normCountMat[1, ]
class(Error in model.frame.default(formula = normCountMat[1, ] ~ Group, drop.unused.levels = TRUE) :
class(normCountMat[1,])
class(as.vector(normCountMat[1,]))
class(unlist(normCountMat[1,]))
unlist(normCountMat[1, ])
glm.nb(unlist(normCountMat[1, ]) ~ Group)
fit0 <- glm.nb(unlist(normCountMat[1, ]) ~ 0)
fit1 <- glm.nb(unlist(normCountMat[1, ]) ~ Group)
fit0 <- glm.nb(unlist(normCountMat[1, ]) ~ 1)
fit1 <- glm.nb(unlist(normCountMat[1, ]) ~ Group)
# Rerform likelihood ratio test for differences in models
lrtest(fit1, fit0)
library(lmtest)
# Rerform likelihood ratio test for differences in models
lrtest(fit1, fit0)
# Perform likelihood ratio test for differences in models
lrtResult <- lrtest(fit1, fit0)
View(lrtResult)
lrtResult
View(lrtResult)
lrtResult$`Pr(>Chisq)`[2]
# Apply to whole data
apply(normCountMat, 1,
function(y) {
# Fit null model
fit0 <- glm.nb(y ~ 1)
# Fit proposed model
fit1 <- glm.nb(y ~ Group)
# Compare fit of models
lrtResult <- lrtest(fit1, fit0)
# Return p-value
return(lrtResult$`Pr(>Chisq)`[2])
})
# Apply to whole data
prelimRes <- apply(normCountMat, 1,
function(y) {
# Fit null model
fit0 <- glm.nb(y ~ 1)
# Fit proposed model
fit1 <- glm.nb(y ~ Group)
# Compare fit of models
lrtResult <- lrtest(fit1, fit0)
# Return p-value
return(lrtResult$`Pr(>Chisq)`[2])
})
prelimRes
p.adjust(prelimRes, method = 'FDR')
p.adjust(prelimRes, method = 'fdr')
# Calculate adjusted p-values
results <- data.frame(Gene = names(prelimRes),
PVal = prelimRes,
FDR = p.adjust(prelimRes, method = 'fdr')
)
View(results)
# Extract FDR <0.05
results$FDR < 0.05
# Extract FDR <0.05
sum(results$FDR < 0.05)
# Extract FDR <0.05
results$Gene[(results$FDR < 0.05)]
# Extract FDR <0.05
sigDEGs <- results$Gene[(results$FDR < 0.05)]
# Look at expression of results
normCountMat[, sigDEGs]
# Extract FDR <0.05
sigDEGs <- results$Gene[(results$FDR < 0.05)]
# Look at expression of results
normCountMat[sigDEGs,]
# Now perform analysis in edegR to compare
library(edgeR)
normCountMat
# Load data
y <- DGEList(counts=normCountMat,group=Group)
y <- normLibSizes(y)
# Now perform analysis in edegR to compare
library(edgeR)
y <- DGEList(counts=normCountMat,group=Group)
y <- norm(y)
y <- edgeR::calcNormFactors(y)
design <- model.matrix(~Group)
y <- estimateDisp(y,design)
fit <- glmFit(y,design)
lrt <- glmLRT(fit,coef=2)
topTags(lrt)
View(lrt)
lrt[["table"]]
lrt[["table"]]$PValue < 0.05
row.names(lrt[["table"]])
row.names(lrt[["table"]])[lrt[["table"]]$PValue < 0.05]
edgerDEGs <- row.names(lrt[["table"]])[lrt[["table"]]$PValue < 0.05]
sigDEGs %in% edgerDEGs
# Develop home-made method for differential gene expression
# Compare results with EdgeR
# Use data from old project
# Load required packages
library(tidyverse)
library(ggplot2)
library(MASS)
library(lmtest)
# Set working directory
setwd('/Users/jamesboot/Documents/GitHubEnterprise/RNAseq/')
# Specify data and meta directory
dataDir <- '/Users/jamesboot/Documents/9.Genome Centre Files/YungYao_Analysis/STAR'
metaDir <- '/Users/jamesboot/Documents/9.Genome Centre Files/YungYao_Analysis/SRA'
# Find files
inFiles <- list.files(path = dataDir,
pattern = '*_ReadsPerGene.out.tab',
full.names = T)
# Get sample names from file names
samples <- gsub(
'_ReadsPerGene.out.tab',
'',
list.files(path = dataDir,
pattern = '*_ReadsPerGene.out.tab')
)
# Load files
rawDat <- lapply(inFiles, function(x){
read.delim(x,
sep = '\t',
skip = 4,
header = F)
})
# Rename elements of list
names(rawDat) <- samples
# Tidy up each of the dataframes in list
# Use col 4 of the dataframe, see link below for reason
# https://www.biostars.org/p/285757/
# https://www.biostars.org/p/407788/
for (x in samples) {
row.names(rawDat[[x]]) <- rawDat[[x]]$V1
rawDat[[x]] <- rawDat[[x]][, c(1,4)]
colnames(rawDat[[x]]) <- c('GeneID', x)
}
# Merge list elements
countMat <- rawDat %>%
reduce(left_join, by = "GeneID")
# Make gene names row names
row.names(countMat) <- countMat$GeneID
countMat$GeneID <- NULL
# Need to update the sample names (colnames)
GSE159_SRA <- read.delim(file.path(metaDir, 'GSE159_SraRunTable.txt'),
sep = ',')[, c('Run', 'Sample.Name')]
GSE159_SampNames <- read.csv(file.path(metaDir, 'GSE159_SampNames.csv'),
header = F,
col.names = c(
'SRA.Sample',
'Real.Sample'
))
GSE189_SRA <- read.delim(file.path(metaDir, 'GSE189_SraRunTable.txt'),
sep = ',')[, c('Run', 'Sample.Name')]
GSE189_SampNames <- read.csv(file.path(metaDir, 'GSE189_SampNames.csv'),
header = F,
col.names = c(
'SRA.Sample',
'Real.Sample'
))
All_SRA <- rbind(GSE159_SRA, GSE189_SRA)
colnames(All_SRA) <- c('Run', 'SRA.Sample')
All_SampNames <- rbind(GSE159_SampNames, GSE189_SampNames)
SampleNameLookup <- list(All_SRA, All_SampNames) %>%
reduce(left_join, by = "SRA.Sample")
colnames(countMat) <-
plyr::mapvalues(colnames(countMat),
as.character(SampleNameLookup$Run),
as.character(SampleNameLookup$Real.Sample))
# Subset counts matrix to samples of itnerest
soi <- c("A_ctrl_0", "A_mut_0", "B_ctrl_0", "B_mut_0", "C_ctrl_0", "C_mut_0")
CountMat <- countMat[, soi]
# Create a meta data dataframe
meta <- data.frame('Sample' = colnames(CountMat),
'Group' = rep(c('CORR', 'DMD'), 3))
# Plot distribution of counts
CountMatLog <- log10(CountMat)
ggplot(CountMatLog, aes(x=A_ctrl_0)) + geom_histogram()
ggplot(CountMat, aes(x=A_ctrl_0)) + geom_histogram(binwidth = 10)
# Filter - remove genes with max counts of 10 across all samples
maximums <- apply(CountMat, MARGIN = 1, max)
filtCountMat <- CountMat[maximums >= 10, ]
# Normalisation (convert to counts per million)
# Calculate normalisation factors
normFactors <- apply(filtCountMat, MARGIN = 2, function(x){
1e6/sum(x)
})
# Apply normalisation factors
normCountMat <- filtCountMat
for (x in 1:ncol(normCountMat)) {
normCountMat[, x] <- normCountMat[, x]*normFactors[x]
}
# Fit models
fit0 <- glm.nb(y ~ 1, data = unlist(normCountMat[1, ]))
normCountMat[1, ]
unlist(normCountMat[1, ])
# Fit models
fit0 <- glm.nb(y ~ 1, data = unlist(normCountMat[1, ]))
# Fit models
fit0 <- glm.nb(y ~ 1, data = normCountMat[1, ])
# Fit models
fit0 <- glm.nb(unlist(normCountMat[1, ]) ~ 1)
fit1 <- glm.nb(unlist(normCountMat[1, ]) ~ Group)
# Use group from meta data as grouping factor
Group <- meta$Group
# Fit models
fit0 <- glm.nb(unlist(normCountMat[1, ]) ~ 1)
fit1 <- glm.nb(unlist(normCountMat[1, ]) ~ Group)
# Perform likelihood ratio test for differences in models
lrtResult <- lrtest(fit1, fit0)
lrtResult$`Pr(>Chisq)`[2]
lrtResult
# Apply to whole data
prelimRes <- apply(normCountMat, 1,
function(y) {
# Fit null model
fit0 <- glm.nb(y ~ 1)
# Fit proposed model
fit1 <- glm.nb(y ~ Group)
# Compare fit of models
lrtResult <- lrtest(fit1, fit0)
# Return p-value
return(lrtResult$`Pr(>Chisq)`[2])
})
# Calculate adjusted p-values
results <- data.frame(Gene = names(prelimRes),
PVal = prelimRes,
FDR = p.adjust(prelimRes, method = 'fdr')
)
# Extract FDR <0.05
sigDEGs <- results$Gene[(results$FDR < 0.05)]
# Look at expression of results
normCountMat[sigDEGs,]
# Now perform analysis in edegR to compare
library(edgeR)
y <- DGEList(counts=normCountMat,group=Group)
y <- calcNormFactors(y)
design <- model.matrix(~Group)
y <- estimateDisp(y,design)
fit <- glmFit(y,design)
lrt <- glmLRT(fit,coef=2)
topTags(lrt)
edgerDEGs <- row.names(lrt[["table"]])[lrt[["table"]]$PValue < 0.05]
# Are sigDEGs all contains within EdgeR DEGs
sigDEGs %in% edgerDEGs
edgerDEGs
topTags(lrt)
edgeR_res <- topTags(lrt)
sigDEGs
View(edgeR_res)
edgeR_res[["table"]]
edgeR_res <- topTags(lrt)[['table']]
edgeR_res <- topTags(lrt)[['table']]
edgerDEGs <- row.names(lrt[["table"]])[lrt[["table"]]$PValue < 0.05]
edgerDEGs
View(edgeR_res)
?topTags
edgeR_res <- topTags(lrt, p.value = 0.05)[['table']]
edgeR_res
edgeR_res <- topTags(lrt, p.value = 0.05)[['table']]
edgeR_res <- topTags(lrt, p.value = 0.05, n = 1000)[['table']]
View(edgeR_res)
sigDEGs
# Extract FDR <0.05
sigDEGs <- results[(results$FDR < 0.05), ]
sigDEGs
sort(sigDEGs$FDR, decreasing = F)
?order
View(sigDEGs)
